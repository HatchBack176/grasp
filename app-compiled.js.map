{"version":3,"sources":["app.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;;AAE1E,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;;AAElE,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;;AAEpE,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;;AAE1E,SAAS,MAAM,GAAG;AACd,SAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;AACrC,SAAK,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;AAC3C,SAAK,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,SAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CACtC;AACD,SAAS,KAAK,GAAG;AACb,SAAK,CAAC,MAAM,EAAE,CAAC;AACf,SAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;AACzB,SAAK,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC;CAClC;AACD,SAAS,SAAS,GAAG;AACjB,SAAK,EAAE,CAAC;AACR,QAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;AAC7B,QAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC/B,QAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;CACpF;;AAED,SAAS,YAAY,GAAG;AACpB,QAAI,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;AACvD,QAAI,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxE,YAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;AACzC,YAAI,KAAK,CAAC,IAAI,EAAE;AACZ,gBAAI,MAAM,EAAE;AACR,oBAAI,CAAC,KAAK,CAAC,KAAK,EAAE;AACd,yBAAK,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;AACvE,yBAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;AAChC,yBAAK,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;iBAC7B;aACJ,MACI;AACD,oBAAI,KAAK,CAAC,KAAK,EAAE;AACb,yBAAK,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;AACrB,yBAAK,CAAC,KAAK,GAAG,IAAI,CAAC;AACnB,yBAAK,CAAC,KAAK,GAAG,CAAC,CAAC;AAChB,yBAAK,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;iBAC7B;aACJ;SACJ;KACJ;CACJ;;AAED,SAAS,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;AACjC,QAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AAC3B,QAAI,SAAS,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;AACjC,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpC,YAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AACtB,YAAI,KAAK,CAAC,IAAI,IAAI,QAAQ,EAAE;AACxB,gBAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;AAC1B,gBAAI,QAAQ,GAAG,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AAC7C,iBAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;SAChE,MACI,OAAO,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC;KAC/D;AACD,QAAI,KAAK,CAAC;AACV,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;AACtE,QAAI,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,KACjD,OAAO,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;AACtD,WAAO,CAAC,CAAC;CACZ;;AAED,SAAS,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;AAClC,QAAI,SAAS,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AAC1C,QAAI,SAAS,EAAE;;AAEX,YAAI,KAAK,EAAE;AACP,gBAAI,KAAK,CAAC,IAAI,IAAI,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,KACnF,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SACzC;AACD,eAAO,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;KAChE,MACI;;AAED,YAAI,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AACzC,YAAI,KAAK,EAAE;AACP,gBAAI,KAAK,CAAC,IAAI,IAAI,MAAM,EACpB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,KAC5D,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SACxC;AACD,eAAO,QAAQ,CAAC;KACnB;CACJ;;AAED,SAAS,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;AAClD,QAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC5B,QAAI,SAAS,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;AACjC,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtC,YAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,QAAQ,EAAE;AAC9E,gBAAI,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;AAC5C,gBAAI,QAAQ,GAAG,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AAC7C,gBAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,EAAE;;AAExC,oBAAI,SAAS,EAAE,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,KACjG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;aACvF,MACI;;AAED,wBAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;aACrD;SACJ,MAAM,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;KAC/C;AACD,QAAI,KAAK,CAAC;AACV,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;AACtE,QAAI,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,KACjD,OAAO,OAAO,CAAC,KAAK,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;AACnD,WAAO,CAAC,CAAC;CACZ;;AAED,SAAS,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE;AACtB,QAAI,IAAI,CAAC,IAAI,IAAI,MAAM,EAAE;AACrB,YAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,QAAQ,EAAE;AACpD,gBAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;AACrC,oBAAQ,MAAM;AACV,qBAAK,QAAQ;AACT,wBAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,EAC3D,OAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,KACvE,OAAO,OAAO,CAAC,KAAK,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;AAAA,AACtD,qBAAK,KAAK;AACN,wBAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,EAC3D,OAAO,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,KACnF,OAAO,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;AAAA,AACnD,qBAAK,MAAM;AACP,wBAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,EAC3D,OAAO,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,KACnF,OAAO,OAAO,CAAC,KAAK,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AAAA,AACpD,qBAAK,QAAQ;AACT,wBAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,EAC3D,OAAO,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,KACrF,OAAO,OAAO,CAAC,KAAK,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;AAAA,AACtD,qBAAK,QAAQ;AACT,wBAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,QAAQ,EAAE;AAC/D,4BAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;AACrC,4BAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC7B,+BAAO,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;qBACvC,MACI,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAC7B,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,QAAQ,IAC7C,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,EAAE;;AAEjC,4BAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AAClF,4BAAI,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;AACtE,6BAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC7C,+BAAO,CAAC,CAAC;qBACZ,MACI,OAAO,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,IAAI,CAAC,CAAC;AAC/D,0BAAM;AAAA,AACV,qBAAK,MAAM;AACP,wBAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,QAAQ,EAAE;AAC/D,4BAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;AACrC,4BAAI,SAAS,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AAC1C,4BAAI,SAAS,EAAE;AACX,gCAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC7B,gCAAI,KAAK,CAAC,IAAI,IAAI,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,KACnF,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACtC,mCAAO,SAAS,CAAC;yBACpB,MACI,OAAO,OAAO,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;qBAChE;AACD,2BAAO,OAAO,CAAC,KAAK,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AAAA,AAC/C;AACI,wBAAI,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACjC,yBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC3C,4BAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC7B,4BAAI,KAAK,CAAC,IAAI,IAAI,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,KAC9E,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;qBACpC;AACD,2BAAO,IAAI,CAAC;AAAA,aACnB;SACJ,MACI,OAAO,OAAO,CAAC,KAAK,CAAC,wCAAwC,EAAE,IAAI,CAAC,CAAC;KAC7E,MACI,IAAI,IAAI,CAAC,IAAI,IAAI,SAAS,EAAE,OAAO,IAAI,CAAC,KACxC,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;CAC1C","file":"app-compiled.js","sourcesContent":["\"use strict\";\n\ndocument.getElementById('calculate').addEventListener('click', calculate);\n\ndocument.getElementById('clear').addEventListener('click', clear);\n\ndocument.getElementById('center').addEventListener('click', center);\n\ndocument.getElementById('labels').addEventListener('click', toggleLabels);\n\nfunction center() {\n    SCENE.camera.position.set(0, 0, 500);\n    SCENE.camera.up = new THREE.Vector3(0,1,0);\n    SCENE.camera.lookAt(new THREE.Vector3(0,0,0));\n    SCENE.controls.target.set(0, 0, 0);\n}\nfunction clear() {\n    SCENE.remove();\n    PLANE = SCENE.addPlane();\n    SCOPE = PLANE.add(new Scope());\n}\nfunction calculate() {\n    clear();\n    let text = editor.getValue();\n    let data = paredit.parse(text);\n    if (data.errors.length > 0) console.error(data);\n    else for (let i = 0; i < data.children.length; i++) add(data.children[i], SCOPE);\n}\n\nfunction toggleLabels() {\n    let labels = document.getElementById('labels').checked;\n    if (SCENE.meshes.Input) for (let i = 0; i < SCENE.meshes.Input.length; i++) {\n        let input = SCENE.meshes.Input[i].object;\n        if (input.edge) {\n            if (labels) {\n                if (!input.label) {\n                    input.label = input.add(new Label(input.label_text, 2 * input.radius));\n                    input.width = input.label.width;\n                    input.parent.updateSize();\n                }\n            }\n            else {\n                if (input.label) {\n                    input.label.remove();\n                    input.label = null;\n                    input.width = 0;\n                    input.parent.updateSize();\n                }\n            }\n        }\n    }\n}\n\nfunction lambda(params, body, scope) {\n    let l = scope.addForm('λ');\n    let new_scope = scope.addScope();\n    for (let i = 0; i < params.length; i++) {\n        let param = params[i];\n        if (param.type == 'symbol') {\n            let symbol = param.source;\n            let variable = new_scope.addVariable(symbol);\n            SCENE.addEdge(l.add(new Input(symbol)), variable.addInput());\n        }\n        else return console.error('invalid params in lambda', data);\n    }\n    let child;\n    for (let i = 0; i < body.length; i++) child = add(body[i], new_scope);\n    if (child) SCENE.addEdge(l.addOutput(), child.output);\n    else return console.error('lambda had no body', body);\n    return l;\n}\n\nfunction define(symbol, value, scope) {\n    let reference = scope.findBinding(symbol);\n    if (reference) {\n        // binding already exists\n        if (value) {\n            if (value.type == 'list') scope.addEdge(add(value, scope).output, reference.addInput());\n            else reference.addInput(value.source);\n        }\n        return console.error('invalid re-definition', symbol, value);\n    }\n    else {\n        // new binding\n        let variable = scope.addVariable(symbol);\n        if (value) {\n            if (value.type == 'list')\n                scope.addEdge(add(value, scope).output, variable.addInput());\n            else variable.addInput(value.source);\n        }\n        return variable;\n    }\n}\n\nfunction letx(name, bindings, body, recursive, scope) {\n    let l = scope.addForm(name);\n    let new_scope = scope.addScope();\n    for (let i = 0; i < bindings.length; i++) {\n        if (bindings[i].children.length == 2 && bindings[i].children[0].type == 'symbol') {\n            let symbol = bindings[i].children[0].source;\n            let variable = new_scope.addVariable(symbol);\n            if (bindings[i].children[1].type == 'list') {\n                // init value is expression\n                if (recursive) new_scope.addEdge(add(bindings[i].children[1], new_scope).output, variable.addInput());\n                else SCENE.addEdge(add(bindings[i].children[1], scope).output, variable.addInput());\n            }\n            else {\n                // init value is atom\n                variable.addInput(bindings[i].children[1].source);\n            }\n        } else console.error('invalid let binding');\n    }\n    let child;\n    for (let i = 0; i < body.length; i++) child = add(body[i], new_scope);\n    if (child) SCENE.addEdge(l.addOutput(), child.output);\n    else return console.error('let had no body', body);\n    return l;\n}\n\nfunction add(data, scope) {\n    if (data.type == 'list') {\n        if (data.children && data.children[0].type == 'symbol') {\n            let source = data.children[0].source;\n            switch (source) {\n                case 'lambda':\n                    if (data.children.length > 2 && data.children[1].type == 'list')\n                        return lambda(data.children[1].children, data.children.slice(2), scope);\n                    else return console.error('invalid lambda', data);\n                case 'let':\n                    if (data.children.length > 2 && data.children[1].type == 'list')\n                        return letx('let', data.children[1].children, data.children.slice(2), false, scope);\n                    else return console.error('invalid let', data);\n                case 'let*':\n                    if (data.children.length > 2 && data.children[1].type == 'list')\n                        return letx('let*', data.children[1].children, data.children.slice(2), true, scope);\n                    else return console.error('invalid let*', data);\n                case 'letrec':\n                    if (data.children.length > 2 && data.children[1].type == 'list')\n                        return letx('letrec', data.children[1].children, data.children.slice(2), true, scope);\n                    else return console.error('invalid letrec', data);\n                case 'define':\n                    if (data.children.length > 1 && data.children[1].type == 'symbol') {\n                        let symbol = data.children[1].source;\n                        let value = data.children[2];\n                        return define(symbol, value, scope);\n                    }\n                    else if (data.children.length > 2 &&\n                        data.children[1].children[0].type == 'symbol' &&\n                        data.children[1].type == 'list') {\n                        // function definition\n                        let l = lambda(data.children[1].children.slice(1), data.children.slice(2), scope);\n                        let variable = scope.addVariable(data.children[1].children[0].source);\n                        scope.addEdge(l.output, variable.addInput());\n                        return l;\n                    }\n                    else return console.error('invalid variable definition', data);\n                    break;\n                case 'set!':\n                    if (data.children.length > 2 && data.children[1].type == 'symbol') {\n                        let symbol = data.children[1].source;\n                        let reference = scope.findBinding(symbol);\n                        if (reference) {\n                            let value = data.children[2];\n                            if (value.type == 'list') scope.addEdge(add(value, scope).output, reference.addInput());\n                            else reference.addInput(value.source);\n                            return reference;\n                        }\n                        else return console.error('could not locate set! reference');\n                    }\n                    return console.error('invalid set!', data);\n                default:\n                    let form = scope.addForm(source);\n                    for (let i = 1; i < data.children.length; i++) {\n                        let child = data.children[i];\n                        if (child.type == 'list') scope.addEdge(add(child, scope).output, form.addInput());\n                        else form.addInput(child.source);\n                    }\n                    return form;\n            }\n        }\n        else return console.error('first element in form was not a symbol', data);\n    }\n    else if (data.type == 'comment') return null;\n    else return scope.addForm(data.source);\n}"]}